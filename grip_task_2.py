# -*- coding: utf-8 -*-
"""GRIP TASK 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p-NCy0ID3TUhCQvPgqKooVR2sslufKvT

# **GRIP @THE SPARKS FOUNDATION**

#TASK 2 : Prediction using Supervised ML

#**AUTHOR : Mehar Bhatnagar**#

## Objective: Predict the percentage of the Student Based on the number of study Hours.
"""

# Commented out IPython magic to ensure Python compatibility.
# import the required liberaries 
import pandas as pd 
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
# %matplotlib inline
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LinearRegression
from sklearn import metrics

# Importing the Data from provided link  

url = "http://bit.ly/w-data"
study_data = pd.read_csv(url)
print("Data has been imported")
study_data.head()

study_data.info()

study_data.head(25)

"""##**PLOT THE DATA**

Plotting the data to find the relation among the variables.
"""

study_data.plot(x='Hours', y='Scores', style='o',c='r' ,grid=True)
plt.title('Hours Vs Percentage')
plt.xlabel('Studying Hours')
plt.ylabel('Score Percentage')
plt.show

"""Observation From the Graph : There is a relation between the Number of Study Hours and Score percentage. The relation is positive and linearly increasing.

## **Preparation of Data**
Dividing it into attributes (inputs) and labels (outputs)
"""

x= study_data[["Hours"]]
y= study_data["Scores"]

#Split the Data into Training and Testing Sets

from sklearn.model_selection import train_test_split
x_train, x_test,y_train, y_test= train_test_split(x, y, test_size= 0.2, random_state= 0)

"""# Training of Algorithm """

from sklearn.linear_model import LinearRegression
lin =LinearRegression()
lin.fit(x_train, y_train)
print('Training is Complete')

print(lin.intercept_)
print(lin.coef_)

"""# Plotting Regression Line """

line = lin.coef_*x + lin.intercept_
plt.scatter(x,y)
plt.plot(x, line, c="r")
plt.xlabel("Hours of study")
plt.ylabel("Score in percentage")
plt.show()

"""# Predictions """

print(x_test)

#making predictions 
y_pred=lin.predict(x_test)
print('Comparing actual Vs predicted data')

fn = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
fn

"""Question: Predict the score for 9.25 hours of study."""

#prediction for 9.25 hours
hours = [[9.25]]
value = lin.predict(hours)
print("Given Number of Hours= {}".format(hours[0][0]))
print("Predicted Score By Algorithm = {}".format(value[0]))

"""# Performance of Algorithm"""

from sklearn import metrics
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))